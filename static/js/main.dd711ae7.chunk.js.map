{"version":3,"sources":["App.js","index.js"],"names":["emojis","emojisWeKnow","Object","keys","App","useState","meaning","setMeaning","className","style","backgroundColor","color","borderRadius","padding","placeholder","textAlign","onChange","event","userInput","target","value","undefined","fontSize","map","item","cursor","onClick","emojiHandler","rootElement","document","getElementById","createRoot","render"],"mappings":"6MAKIA,EAAS,CACX,eAAM,QACN,eAAM,YACN,eAAM,aACN,eAAM,SACN,eAAM,SACN,eAAM,YACN,eAAM,OACN,eAAM,aACN,gBAAO,UACP,eAAM,WAIJC,EAAeC,OAAOC,KAAKH,GAEhB,SAASI,IAEtB,MAA8BC,mBAAS,IAAG,mBAAnCC,EAAO,KAAEC,EAAU,KAoB1B,OACE,sBAAKC,UAAU,MAAK,UAClB,oBACEC,MAAO,CACLC,gBAAiB,aACjBC,MAAO,SACPC,aAAc,SACdC,QAAS,QACT,wCAKJ,uBACEC,YAAY,yBACZL,MAAO,CAAEG,aAAc,OAAQC,QAAS,OAAQE,UAAW,UAC3DC,SAjCN,SAA2BC,GACzB,IAAIC,EAAYD,EAAME,OAAOC,MACzBd,EAAUN,EAAOkB,QAELG,IAAZf,IACFA,EAAU,4BAGZC,EAAWD,EACb,IA2BI,sBAAKG,MAAO,CAAEE,MAAO,SAAUE,QAAS,OAAQS,SAAU,QAAS,UACjE,sBAAMb,MAAO,CAAEE,MAAO,cAAe,qCAEpCL,KAGH,oBAAIG,MAAO,CAAEa,SAAU,OAAQX,MAAO,UAAW,0CAIhDV,EAAasB,KAAI,SAAUC,GAC1B,OACE,sBACEf,MAAO,CAAEa,SAAU,SAAUT,QAAS,OAAQY,OAAQ,WACtDC,QAAS,kBAvCnB,SAAsBF,GAEpBjB,EADcP,EAAOwB,GAEvB,CAoCyBG,CAAaH,EAAK,EAAC,SAGjCA,GAFIA,EAKX,MAGN,CChFA,IAAMI,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAAC5B,EAAG,M","file":"static/js/main.dd711ae7.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React, { useState } from \"react\";\n\n// variable declaration\n\nvar emojis = {\n  \"ü•≠\": \"Mango\",\n  \"üçç\": \"Pineapple\",\n  \"üçâ\": \"Watermelon\",\n  \"üçá\": \"Grapes\",\n  \"üçå\": \"Banana\",\n  \"üçé\": \"Red apple\",\n  \"üçê\": \"Pear\",\n  \"üçì\": \"Strawberry\",\n  \"ü•• \": \"Coconut\",\n  \"ü•ë\": \"Avocado\"\n};\n\nlet counter = 0;\nvar emojisWeKnow = Object.keys(emojis);\n\nexport default function App() {\n  // state handling\n  const [meaning, setMeaning] = useState(\"\");\n\n  // function definition\n  function emojiInputHandler(event) {\n    var userInput = event.target.value;\n    var meaning = emojis[userInput];\n\n    if (meaning === undefined) {\n      meaning = \"We dont have this emoji.\";\n    }\n\n    setMeaning(meaning);\n  }\n\n  function emojiHandler(item) {\n    var meaning = emojis[item];\n    setMeaning(meaning);\n  }\n\n  // view\n  return (\n    <div className=\"App\">\n      <h1\n        style={{\n          backgroundColor: \"blueviolet\",\n          color: \"yellow\",\n          borderRadius: \"0.5rem\",\n          padding: \"1rem\"\n        }}\n      >\n        Identify the fruit emojis!\n      </h1>\n\n      <input\n        placeholder=\"Input your emojis here\"\n        style={{ borderRadius: \"1rem\", padding: \"1rem\", textAlign: \"center\" }}\n        onChange={emojiInputHandler}\n      />\n\n      <div style={{ color: \"yellow\", padding: \"1rem\", fontSize: \"26px\" }}>\n        <span style={{ color: \"whitesmoke\" }}>Your emoji meaning ----</span>\n\n        {meaning}\n      </div>\n\n      <h2 style={{ fontSize: \"30px\", color: \"yellow\" }}>\n        Here are the emojis we know:\n      </h2>\n\n      {emojisWeKnow.map(function (item) {\n        return (\n          <span\n            style={{ fontSize: \"1.5rem\", padding: \"1rem\", cursor: \"pointer\" }}\n            onClick={() => emojiHandler(item)}\n            key={item}\n          >\n            {item}\n          </span>\n        );\n      })}\n    </div>\n  );\n}\n\n// For each items return something back to the view\n// emojisWeKnow we can map using arrow function\n// We access an object using arrow function\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}